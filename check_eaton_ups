#!/usr/bin/perl -w


# CHANGE LOG
# ----------
# 2024/01/29	njeffrey	Script created to monitor Eaton / PowerWare UPS via SNMP


# nagios check to query Eaton / PowerWare UPS via SNMP


# NOTES
# -----
#
#
#  This script should return one (and only one) line of ouput.  Multiple lines of output are silently ignored by nagios.
#
#  The line of output will become the body of the alert message sent by nagios
#
#
#  This script queries a remote host via SNMP
#
#  You will need a section in the services.cfg
#  file on the nagios server that looks similar to the following.
#      # Define a service to check the Eaton UPS
#      # Parameters are SNMP community name
#      define service {
#              use                             generic-service
#              hostgroup_name                  all_eaton_ups
#              service_description             Eaton UPS
#              check_command                   check_eaton_ups!public
#              }
#
#
#  You will also need a command definition similar to the following in commands.cfg on the nagios server
#      # 'check_eaton_ups' command definition
#      # parameters are -H hostname -C snmp_community
#      define command{
#              command_name    check_eaton_ups
#              command_line    $USER1$/check_eaton_ups -H $HOSTADDRESS$ -C $ARG1$
#              }
#
#

# Different Network management cards may use slightly different OID values.  Here are a few from the XUPS-MIB
#  xupsIdentManufacturer        .1.3.6.1.4.1.534.1.1.1.0    Manufacturer
#  xupsIdentModel               .1.3.6.1.4.1.534.1.1.2.0    UPS model (ie PowerWare Plus Model 18)
#  xupsIdentSoftwareVersion     .1.3.6.1.4.1.534.1.1.3.0    Firmware revision level(s) of the UPS microcontoller(s)
#  xupsIdentOemCode             .1.3.6.1.4.1.534.1.1.4.0    A binary code indicated who the UPS was manufactured for or labeld for.  0 or 255 indicates Powerware itself.
#
#  xupsBatCapacity.0            .1.3.6.1.4.1.534.1.2.4.0    Battery percent charge
#  xupsBatTimeRemaining         .1.3.6.1.4.1.534.1.2.1.0    Battery runtime remaining in seconds before UPS turns off due to low battery
#  xupsEnvAmbientTemp.0         .1.3.6.1.4.1.534.1.6.1.0    The reading of the ambient temperature in the vicinity of the UPS or SNMP agent
#
#  xupsInputFrequency           .1.3.6.1.4.1.534.1.3.1      The utility line frequency in tenths of Hz
#  xupsInputLineBads            .1.3.6.1.4.1.534.1.3.2      The number of times the Input was out of tolerance in voltage or frequency
#  xupsInputNumPhases           .1.3.6.1.4.1.534.1.3.3      
#  xupsInputTable               .1.3.6.1.4.1.534.1.3.4      The Aggregate Object with number of entries equal to NumPhases and including the xupsInput group
#  xupsInputSource              .1.3.6.1.4.1.534.1.3.5      The present external source of input power. 1=other 2=none on battery 3=primaryUtility 4=bypassFeed 5=secondaryUtility 6=generator 7=flyweel 8=fuelcell
#
#  xupsOutputLoad               .1.3.6.1.4.1.534.1.4.1	    The UPS output load in percent of rated capacity
#  xupsOutputFrequency          .1.3.6.1.4.1.534.1.4.2	    The measured UPS output frequency in tenths of Hz
#  xupsOutputNumPhases          .1.3.6.1.4.1.534.1.4.3	    The number of metered output phases, serves as the table index
#  xupsOutputOutputTable        .1.3.6.1.4.1.534.1.4.4	    The Aggregate Object with number of entries equal to NumPhases and including the xupsOutput group
#  xupsOutputSource             .1.3.6.1.4.1.534.1.4.5	    The present source of output power.  1=other 2=none 3=normal 4=bypass 5=batter 6=booster 7=reducer 8=parallelCapacity 9=parallelRedundant, 10=highEfficiencyMode
#
#  xupsAlarms                   .1.3.6.1.4.1.534.1.7.1      Current number of alarm conditions
#  xupsAlarmTable               .1.3.6.1.4.1.534.1.7.2      
#  xupsOnBattery                .1.3.6.1.4.1.534.1.7.3      
#  xupsLowBattery               .1.3.6.1.4.1.534.1.7.4      
#  xupsUtilityPowerRestored     .1.3.6.1.4.1.534.1.7.5
#  xupsReturnFromLowBattery     .1.3.6.1.4.1.534.1.7.6
#  xupsOutputOverload           .1.3.6.1.4.1.534.1.7.7
#  xupsInternalFailure          .1.3.6.1.4.1.534.1.7.8
#  xupsBatteryDischarged        .1.3.6.1.4.1.534.1.7.9
#  xupsInverterFailure          .1.3.6.1.4.1.534.1.7.10
#  xupsOnBypass                 .1.3.6.1.4.1.534.1.7.11
#  xupsBypassNotAvailable       .1.3.6.1.4.1.534.1.7.12
#  xupsOutputOff                .1.3.6.1.4.1.534.1.7.13
#  xupsInputFailure             .1.3.6.1.4.1.534.1.7.14
#  xupsBuildingAlarm            .1.3.6.1.4.1.534.1.7.15
#  xupsShutdownImminent         .1.3.6.1.4.1.534.1.7.16
#  xupsOnInverter               .1.3.6.1.4.1.534.1.7.17
#  xupsAlarmNumEvents           .1.3.6.1.4.1.534.1.7.18    The number of entries in the UPS event history queue
#  xupsAlarmEventTable          .1.3.6.1.4.1.534.1.7.19    A table of the UPS internal event history queue
#  xupsBreakerOpen              .1.3.6.1.4.1.534.1.7.20
#  xupsBreakerOpen              .1.3.6.1.4.1.534.1.7.21
#  xupsAlarmEntryRemoved        .1.3.6.1.4.1.534.1.7.22
#  xupsAlarmBatteryBad          .1.3.6.1.4.1.534.1.7.23
#  xupsOutputOffAsRequested     .1.3.6.1.4.1.534.1.7.24
#  xupsDiagnosticTestFailed     .1.3.6.1.4.1.534.1.7.25
#  xupsCommunicationsLost       .1.3.6.1.4.1.534.1.7.26
#  xupsUpsShutdownPending       .1.3.6.1.4.1.534.1.7.27
#  xupsAlarmTestInProgress      .1.3.6.1.4.1.534.1.7.28
#  xupsAmbientTempBad           .1.3.6.1.4.1.534.1.7.29
#  xupsLossOfRedundancy         .1.3.6.1.4.1.534.1.7.30
#  xupsAlarmTempBad             .1.3.6.1.4.1.534.1.7.31
#  xupsAlarmChargerFailed       .1.3.6.1.4.1.534.1.7.32
#  xupsAlarmFanFailure          .1.3.6.1.4.1.534.1.7.33
#  xupsAlarmFuseFailure         .1.3.6.1.4.1.534.1.7.34
#  xupsPowerSwitchBad           .1.3.6.1.4.1.534.1.7.35
#  xupsModuleFailure            .1.3.6.1.4.1.534.1.7.36
#  xupsOnAlternatePowerSource   .1.3.6.1.4.1.534.1.7.37
#  xupsAltPowerNotAvailable     .1.3.6.1.4.1.534.1.7.38
#  xupsNoticeCondition          .1.3.6.1.4.1.534.1.7.39
#  xupsRemoteTempBad            .1.3.6.1.4.1.534.1.7.40
#  xupsRemoteHumidityBad        .1.3.6.1.4.1.534.1.7.41
#  xupsTestBatteryStatus        .1.3.6.1.4.1.534.1.8.2        Reading this enumerated value gives an indication of the UPS Battery test status 1=unknown 2=passwed 3=failed 4=inProgress 5=notSupported 6=inhibited
# 
#  xupsEnvAmbientTemp                .1.3.6.1.4.1.534.1.6.1     The reading of the ambient temperature in the vicinity of the UPS or SNMP agent.
#  xupsEnvAmbientLowerLimit          .1.3.6.1.4.1.534.1.6.2     The Lower Limit of the ambient temperature; if xupsEnvAmbientTemp falls below this value, the  upsAmbientTempBad alarm will occu…
#  xupsEnvAmbientUpperLimit          .1.3.6.1.4.1.534.1.6.3     The Upper Limit of the ambient temperature; if xupsEnvAmbientTemp rises above this value, the xupsAmbientTempBad alarm will occu…
#  xupsEnvAmbientHumidity            .1.3.6.1.4.1.534.1.6.4     The reading of the ambient humidity in the vicinity of the UPS or SNMP agent.
#  xupsEnvRemoteTemp                 .1.3.6.1.4.1.534.1.6.5     The reading of a remote temperature sensor connected to the UPS or SNMP agent.
#  xupsEnvRemoteHumidity             .1.3.6.1.4.1.534.1.6.6     The reading of a remote humidity sensor connected to the UPS or SNMP agent.
#  xupsEnvNumContacts                .1.3.6.1.4.1.534.1.6.7     The number of Contacts in the xupsContactSenseTable. This object indicates the number of rows in the xupsContactSenseTable.
#  xupsContactSenseTable             .1.3.6.1.4.1.534.1.6.8     A list of Contact Sensing table entries. The number of entries is given by the value of xupsEnvNumContacts.
#  xupsEnvRemoteTempLowerLimit       .1.3.6.1.4.1.534.1.6.9     The Lower Limit of the remote temperature; if xupsEnvRemoteTemp falls below this value, the xupsRemoteTempBad alarm will occur.
#  xupsEnvRemoteTempUpperLimit       .1.3.6.1.4.1.534.1.6.10    The Upper Limit of the remote temperature; if xupsEnvRemoteTemp rises above this value, the xupsRemoteTempBad alarm will occur.
#  xupsEnvRemoteHumidityLowerLimit   .1.3.6.1.4.1.534.1.6.11    The Lower Limit of the remote humidity reading; if xupsEnvRemoteHumidity falls below this value, the xupsRemoteHumidityBad alarm…
#  xupsEnvRemoteHumidityUpperLimit   .1.3.6.1.4.1.534.1.6.12    The Upper Limit of the remote humidity reading; if xupsEnvRemoteHumidity rises above this value, the xupsRemoteHumidityBad alarm….




use strict;				#enforce good coding practices
use Getopt::Long;                       #allow --long-switches to be used as parameters.  Install with: perl -MCPAN -e 'install Getopt::Long'



# declare variables
my ($OK,$WARN,$CRITICAL,$UNKNOWN);
my ($CHECK_NAME,$cmd,$snmpwalk,$snmpget);
my ($host,$oid,$key,%ups,$community,$temp_min_warn,$temp_min_crit,$temp_max_warn,$temp_max_crit);
my ($opt_h,$opt_v,$opt_w,$opt_c,$opt_C,$opt_H);
my ($verbose,$output_details,$perf_data);
$cmd = "";                                              #initialize variable
$CHECK_NAME                 = "Eaton UPS";		#name of nagios check
$verbose                    = "no";                    	#yes/no variable to increase output for debugging
$temp_min_warn              = 10;			#minimum degrees celsius for warning
$temp_min_crit              = 5;			#minimum degrees celsius for critical alert
$temp_max_warn              = 26;			#maximum degrees celsius for warning
$temp_max_crit              = 28;			#maximum degrees celsius for critical alert
$community                  = "public";  		#default SNMP community name
$output_details             = "";			#initialize variable to hold details of script output
$snmpwalk                   = "/usr/bin/snmpwalk";	#location of binary
$snmpget                    = "/usr/bin/snmpget";	#location of binary
#
# Nagios return codes
#
$OK=            0;
$WARN=          1;
$CRITICAL=      2;
$UNKNOWN=       3;




sub get_options {
   #
   # this gets the command line parameters provided by the users
   #
   print "running get_options subroutine \n" if ($verbose eq "yes");
   #
   Getopt::Long::Configure('bundling');
   GetOptions(
      "h"   => \$opt_h, "help"        => \$opt_h,
      "v"   => \$opt_v, "verbose"     => \$opt_v,
      "C=s" => \$opt_C, "community=s" => \$opt_C, "comm=s" => \$opt_C,
      "H=s" => \$opt_H, "hostname=s"  => \$opt_H, "host=s" => \$opt_H,
   );
   #
   #
   #
   # If the user supplied -h or --help, generate the help messages
   #
   if( defined( $opt_h ) ) {
      print "Nagios plugin for determining filesystem usage. \n";
      print "Examples: \n";
      print "   $0 --host=myfiler --community=public \n";
      print "   $0     -H myfiler          -C public \n";
      print "\n\n";
      exit $UNKNOWN;
   }
   #
   # If the user supplied -v or --verbose, increase verbosity for debugging
   if( defined( $opt_v ) ) {
      $verbose = "yes";
   } 
   #
   #
   # If the user did not supply a --community SNMP community string, use "public"
   #
   if( defined( $opt_C ) ) {
      $community = $opt_C;
   } else {
      $community = "public";
   }
   #
   # If the user did not supply a --host=??? , generate a warning
   #
   if( defined( $opt_H ) ) {
      $host = $opt_H;
   } else {
      print "$CHECK_NAME UNKNOWN - a remote host to check was not provided. Use this syntax: $0 -H hostname -C snmp_community\n";
      exit $CRITICAL;                                           #exit script
   }
   #
   print "host=$host community=$community \n" if ($verbose eq "yes");
}                       #end of subroutine





sub sanity_checks {
   #
   #
   print "running sanity_checks subroutine \n" if ($verbose eq "yes");
   #
   #
   if ( ! -f "$snmpwalk" ) {
      print "ERROR: Cannot find $snmpwalk \n";
      exit;
   }
   if ( ! -x "$snmpwalk" ) {
      print "ERROR: $snmpwalk is not executable by the current user\n";
      exit;
   }
   if ( ! -f "$snmpget" ) {
      print "ERROR: Cannot find $snmpget \n";
      exit;
   }
   if ( ! -x "$snmpget" ) {
      print "ERROR: $snmpget is not executable by the current user\n";
      exit;
   }
}                                                       #end of subroutine




sub check_ups_model_serial {
   #
   # Get the model and serial number 
   # This uses the XUPS-MIB
   # 
   print "running check_ups_model_serial subroutine \n" if ($verbose eq "yes");
   #
   # Get the manufacturer
   $oid = ".1.3.6.1.4.1.534.1.1.1.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   $ups{xupsIdentManufacturer} = "Unknown Manufacturer";		#initialize variable
   open(IN,"$cmd |");                                                   #get the index numbers of the LUNs
   while (<IN>) {                                                       #read a line from the command output
      s/\"//g;                                                          #get rid of quotation marks
      if ( /$oid ([a-zA-Z0-9]+)/ ) {  			
         $ups{xupsIdentManufacturer} = $1; 	           		#assign value to hash
         print "   Manufacturer: $ups{xupsIdentManufacturer} \n" if ($verbose eq "yes");
      }
   }                                                                    #end of while loop
   #
   # Get the model number
   $oid = ".1.3.6.1.4.1.534.1.1.2.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   $ups{xupsIdentModel} = "Unknown Model";				#initialize variable
   open(IN,"$cmd |");                                                   #get the index numbers of the LUNs
   while (<IN>) {                                                       #read a line from the command output
      s/\"//g;                                                          #get rid of quotation marks
      if ( /$oid ([a-zA-Z0-9_ \-]+)/ ) {  			
         $ups{xupsIdentModel} = $1; 	  	         		#assign value to hash
         print "   Model: $ups{xupsIdentModel} \n" if ($verbose eq "yes");
      }
   }                                                                    #end of while loop
   #
   # Get the firmware version
   $oid = ".1.3.6.1.4.1.534.1.1.3.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   $ups{xupsIdentSoftwareVersion} = "Unknown Firmware";			#initialize variable
   open(IN,"$cmd |");                                                   #get the index numbers of the LUNs
   while (<IN>) {                                                       #read a line from the command output
      s/\"//g;                                                          #get rid of quotation marks
      if ( /$oid (.*)/ ) {  			
         $ups{xupsIdentSoftwareVersion} = $1;            		#assign value to hash
         print "   Firmware version: $ups{xupsIdentSoftwareVersion} \n" if ($verbose eq "yes");
      }
   }                                                                    #end of while loop


}									#end of subroutine 





sub check_ups_input_source {
   #
   # query the SNMP counters to see if the UPS is currently running on battery power
   # This uses the XUPS-MIB
   # 
   # Potential values are:  1=other 2=none on battery 3=primaryUtility 4=bypassFeed 5=secondaryUtility 6=generator 7=flyweel 8=fuelcell
   #
   print "running check_ups_state subroutine \n" if ($verbose eq "yes");
   #
   $oid = ".1.3.6.1.4.1.534.1.3.5.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   #
   $ups{xupsInputSource} = "unknown";				#initialize variable
   #
   open(IN,"$cmd |");                                                   #get the index numbers of the LUNs
   while (<IN>) {                                                       #read a line from the command output
      s/\"//g;                                                          #get rid of quotation marks
      if ( /$oid 1/ ) {	$ups{xupsInputSource} = "other" };            	#assign value to hash
      if ( /$oid 2/ ) {	$ups{xupsInputSource} = "none" };            	#assign value to hash
      if ( /$oid 3/ ) {	$ups{xupsInputSource} = "primaryUtility" };     #assign value to hash
      if ( /$oid 4/ ) {	$ups{xupsInputSource} = "bypassFeed" };         #assign value to hash
      if ( /$oid 5/ ) {	$ups{xupsInputSource} = "secondaryUtility" };   #assign value to hash
      if ( /$oid 6/ ) {	$ups{xupsInputSource} = "generator" };          #assign value to hash
      if ( /$oid 7/ ) {	$ups{xupsInputSource} = "flywheel" };           #assign value to hash
      if ( /$oid 8/ ) {	$ups{xupsInputSource} = "fuelcell" };           	#assign value to hash
      #
      print "   UPS input: $ups{xupsInputSource} \n" if ($verbose eq "yes");
   }                                                                    #end of while loop
}									#end of subroutine 





sub get_temperature {
   #
   # query the SNMP counters for temperature sensors
   # Note that this requires a supported environmental sensor attached to the UPS
   #
   print "running get_temperature subroutine \n" if ($verbose eq "yes");
   #
   # To be written....
}                                                                       #end of subroutine




sub get_humidity {
   #
   # query the SNMP counters for ambient humidity
   # Note that this requires a supported environmental sensor attached to the UPS
   # If a supported environmental monitor is attached, the result will be the percentage of relative humidity
   # If a supported environmental sensor is not attached, the result will be:  -1
   #
   print "running get_humidity subroutine \n" if ($verbose eq "yes");
   #
   # To be written....
}                                                                       #end of subroutine







sub check_battery_capacity {
   #
   # query the SNMP counters for the battery capacity
   # This uses the XUPS-MIB
   #
   print "running check_battery_capacity subroutine \n" if ($verbose eq "yes");
   #
   $oid = ".1.3.6.1.4.1.534.1.2.4.0";                             
   $cmd = "$snmpwalk -OnqU -v 1 -c $community $host $oid";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   #
   $ups{xupsBatCapacity} = "unknown";					#initialize variable
   #
   open(IN,"$cmd |");                                                   #get the index numbers of the LUNs
   while (<IN>) {                                                       #read a line from the command output
      s/\"//g;                                                          #get rid of quotation marks
      if ( /$oid ([0-9]+)/ ) {         					#look for integer value between 0-100
         $ups{xupsBatCapacity} = $1;   	              			#assign value to hash
         print "   Battery capacity: $ups{xupsBatCapacity}%  \n" if ($verbose eq "yes");
      }
   }                                                                    #end of while loop
   close IN;                                                            #close filehandle
}                                                                       #end of subroutine




sub check_ups_load {
   #
   # query the SNMP counters for the UPS load
   # This uses the XUPS-MIB
   #
   print "running check_ups_load subroutine \n" if ($verbose eq "yes");
   #
   $oid = ".1.3.6.1.4.1.534.1.4.1.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   #
   $ups{xupsOutputLoad} = "unknown";					#initialize variable
   #
   open(IN,"$cmd |");                                                   #get the index numbers of the LUNs
   while (<IN>) {                                                       #read a line from the command output
      s/\"//g;                                                          #get rid of quotation marks
      if ( /$oid ([0-9]+)/ ) {         					#look for integer value between 0-100
         $ups{xupsOutputLoad} = $1;   	              			#assign value to hash
         print "   UPS output load: $ups{xupsOutputLoad}%  \n" if ($verbose eq "yes");
      }
   }                                                                    #end of while loop
   close IN;                                                            #close filehandle
}                                                                       #end of subroutine





sub check_battery_runtime_remaining {
   #
   # query the SNMP counters for the UPS runtime remaining (in minutes)
   # This uses the XUPS-MIB
   #  xupsBatTimeRemaining         .1.3.6.1.4.1.534.1.2.1.0    Battery runtime remaining in seconds before UPS turns off due to low battery
   #
   print "running check_battery_runtime_remaining subroutine \n" if ($verbose eq "yes");
   #
   $oid = ".1.3.6.1.4.1.534.1.2.1.0";                             
   $cmd = "$snmpget -Onq -v 1 -c $community $host $oid";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   #
   $ups{xupsBatTimeRemaining} = "unknown";				#initialize variable
   #
   open(IN,"$cmd |");                                                   #get the index numbers of the LUNs
   while (<IN>) {                                                       #read a line from the command output
      s/\"//g;                                                          #get rid of quotation marks
      if ( /$oid ([0-9]+)/ ) { 						#
         $ups{xupsBatTimeRemaining} = ($1 / 60); 			#convert seconds to minutes
         $ups{xupsBatTimeRemaining} = sprintf("%.0f", $ups{xupsBatTimeRemaining}); 	#truncate to zero decimal places, closest minute is good enough
         print "   UPS battery runtime remaining: $ups{xupsBatTimeRemaining} minutes \n" if ($verbose eq "yes");
      }
   }                                                                    #end of while loop
   close IN;                                                            #close filehandle
}                                                                       #end of subroutine




sub check_ups_alarms {
   #
   # query the SNMP counters for the UPS runtime remaining (in minutes)
   # This uses the XUPS-MIB
   #  xupsAlarms                   .1.3.6.1.4.1.534.1.7.1      Current number of alarm conditions
   #
   print "running check_ups_alarms subroutine \n" if ($verbose eq "yes");
   #
   $oid = ".1.3.6.1.4.1.534.1.7.1.0";                             
   $cmd = "$snmpwalk -Onq -v 1 -c $community $host $oid";
   print "   running command: $cmd \n" if ($verbose eq "yes");
   #
   $ups{xupsAlarms} = "unknown";					#initialize variable
   #
   open(IN,"$cmd |");                                                   #get the index numbers of the LUNs
   while (<IN>) {                                                       #read a line from the command output
      s/\"//g;                                                          #get rid of quotation marks
      if ( /$oid ([0-9]+)/ ) { 						#look for output similar to 1234 seconds
         $ups{xupsAlarms} = $1; 					#save value to hash
         print "   Number of alarms: $ups{xupsAlarms} \n" if ($verbose eq "yes");
      }
   }                                                                    #end of while loop
   close IN;                                                            #close filehandle
}                                                                       #end of subroutine








sub print_output {
   #
   # print output in the format expected by nagios
   #
   print "running print_output subroutine \n" if ($verbose eq "yes");
   #
   # The nagios performance data will be the same for all the outputs, so just put it in a variable that can be use by all the output options
   #
   # The format is:  label=value[UOM];[warn];[crit];[min];[max]
   # On the "label=value" section is required.  The warn|crit|min|max entries are optional.
   # You can have multiple items of perf data, just separate each section with a space
   # UOM is Units Of Measurement.    Can be s=seconds B=bytes MB=megabytes %=percent c=counter
   # You can use the standard nagios ranges and thresholds formats (examples below)
   # Range definition	Generate an alert if x...
   # ----------------   -------------------------
   # 10	                < 0 or > 10, (outside the range of {0 .. 10})
   # 10:	        < 10, (outside {10 .. ∞})
   # ~:10	        > 10, (outside the range of {-∞ .. 10})
   # 10:20	        < 10 or > 20, (outside the range of {10 .. 20})
   # @10:20	        ≥ 10 and ≤ 20, (inside the range of {10 .. 20})
   #
   $perf_data = "ups_output_load=$ups{xupsOutputLoad}%;;; battery_runtime_remaining:$ups{xupsBatTimeRemaining};10:9999;15:9999;; battery_capacity:$ups{xupsBatCapacity};;50;100; ";
   #
   #
   # Much of the text of the output will be the same.  Put the common stuff in a variable so we can simplify the outputs
   #
   $output_details = "Model:$ups{xupsIdentModel}, Power input source:$ups{xupsInputSource},  Battery capacity:$ups{xupsBatCapacity}\%,   Load:$ups{xupsOutputLoad}\%,   Runtime remaining is $ups{xupsBatTimeRemaining} minutes, Number of alarms:$ups{xupsAlarms}";
   #
   #
   if ( ($ups{xupsInputSource} ne "primaryUtility") && ($ups{xupsInputSource} ne "secondaryUtility") ) {
      print "$CHECK_NAME WARN - bad UPS input source, check utility power.  $output_details | $perf_data \n";
      exit $WARN; 
   }
   #
   if ( $ups{xupsBatTimeRemaining} < 30 ) {
      print "$CHECK_NAME WARN - low UPS battery runtime remaining.  Either increase the battery runtime or decrease the load on the UPS.  $output_details | $perf_data \n";
      exit $CRITICAL; 
   }
   if ( $ups{xupsOutputLoad} > 80 ) {
      print "$CHECK_NAME WARN - high load on UPS.  Either increase the battery capacity or decrease the load on the UPS.  $output_details | $perf_data \n";
      exit $CRITICAL; 
   }
   if ( $ups{xupsAlarms} > 0 ) {
      print "$CHECK_NAME WARN - UPS is in an alarm state, please investigate.  $output_details | $perf_data \n";
      exit $CRITICAL; 
   }
   #
   #
   # This message gets sent if everything is ok
   print "$CHECK_NAME OK - $output_details | $perf_data \n";
   exit $OK;
   #
   # The script should never get this far
   print "$CHECK_NAME UNKNOWN - Could not determine UPS status.  Please investigate. $output_details | $perf_data \n";
   exit $UNKNOWN;
}                                                                       #end of subroutine





# --------------------------- main body of program ----------------------
get_options;
sanity_checks;
check_ups_model_serial;
check_ups_input_source;
get_temperature;
get_humidity;
check_battery_capacity;
check_ups_load;
check_battery_runtime_remaining;
check_ups_alarms;
print_output;




